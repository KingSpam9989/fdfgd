name: RDP-via-noVNC
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-noVNC"
          netsh advfirewall firewall add rule name="RDP-noVNC" `
             dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install Cloudflared
        run: |
          $url = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe"
          $dest = "$env:ProgramFiles\cloudflared.exe"
          Invoke-WebRequest -Uri $url -OutFile $dest

      - name: Start RDP noVNC Server (websockify background)
        run: |
          python -m pip install --upgrade pip
          python -m pip install websockify

          Write-Host "Starting websockify (noVNC bridge) in background on port 6080 -> 127.0.0.1:5900"
          Start-Process -FilePath "python" -ArgumentList "-m websockify 6080 127.0.0.1:5900" -WindowStyle Hidden
          Start-Sleep -Seconds 3

      - name: Expose via Cloudflared (foreground — prints URL)
        env:
          RDP_CREDS: ${{ env.RDP_CREDS }}
        run: |
          $cf = "$env:ProgramFiles\cloudflared.exe"
          if (-not (Test-Path $cf)) {
            Write-Error "cloudflared executable not found at $cf"
            exit 1
          }

          # Print credentials first
          Write-Host "`n=== RDP via noVNC ==="
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_CREDS"
          Write-Host "====================`n"
          Write-Host "Starting cloudflared in foreground. The ephemeral URL (trycloudflare) will be printed below."

          # Run cloudflared in foreground (no trailing '&') — prints ephemeral URL to stdout
          & $cf tunnel --url http://localhost:6080 --no-autoupdate
